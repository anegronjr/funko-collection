// <auto-generated />
using FunkoCollection;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace FunkoCollection.Migrations
{
    [DbContext(typeof(FunkoContext))]
    [Migration("20190330224707_cersei")]
    partial class cersei
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.8-servicing-32085")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("FunkoCollection.Models.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("CategoryId");

                    b.ToTable("Category");

                    b.HasData(
                        new { CategoryId = 1, Name = "Naruto" },
                        new { CategoryId = 2, Name = "Game of Thrones" },
                        new { CategoryId = 3, Name = "Star Wars" }
                    );
                });

            modelBuilder.Entity("FunkoCollection.Models.Funko", b =>
                {
                    b.Property<int>("FunkoId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CategoryId");

                    b.Property<string>("Image");

                    b.Property<string>("Name");

                    b.HasKey("FunkoId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Funkos");

                    b.HasData(
                        new { FunkoId = 1, CategoryId = 1, Image = "/images/naruto.jpg", Name = "Naruto" },
                        new { FunkoId = 2, CategoryId = 1, Image = "/images/sasuke.jpg", Name = "Sasuke" },
                        new { FunkoId = 3, CategoryId = 1, Image = "/images/sakura.jpg", Name = "Sakura" },
                        new { FunkoId = 4, CategoryId = 1, Image = "/images/kakashi.jpg", Name = "Kakashi" },
                        new { FunkoId = 5, CategoryId = 2, Image = "/images/jonsnow.jpeg", Name = "Jon Snow" },
                        new { FunkoId = 6, CategoryId = 2, Image = "/images/daenerys.jpeg", Name = "Daenerys" },
                        new { FunkoId = 7, CategoryId = 2, Image = "/images/cersei.jpeg", Name = "Cersei" },
                        new { FunkoId = 8, CategoryId = 2, Image = "/images/nightking.jpeg", Name = "The Night King" },
                        new { FunkoId = 9, CategoryId = 3, Image = "/images/darthvader.jpg", Name = "Darth Vader" },
                        new { FunkoId = 10, CategoryId = 3, Image = "/images/stormtrooper.jpg", Name = "Storm Trooper" },
                        new { FunkoId = 11, CategoryId = 3, Image = "/images/chewbacca.jpg", Name = "Chewbacca" },
                        new { FunkoId = 12, CategoryId = 3, Image = "/images/yoda.jpg", Name = "Yoda" }
                    );
                });

            modelBuilder.Entity("FunkoCollection.Models.Funko", b =>
                {
                    b.HasOne("FunkoCollection.Models.Category", "Category")
                        .WithMany("Funkos")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
